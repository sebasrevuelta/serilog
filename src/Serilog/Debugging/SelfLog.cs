// Copyright 2014 Serilog Contributors
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.IO;

namespace Serilog.Debugging
{
    /// <summary>
    /// A simple source of information generated by Serilog itself,
    /// for example when exceptions are thrown and caught internally.
    /// </summary>
    public static class SelfLog
    {
        /// <summary>
        /// The output mechanism for self-log events.
        /// </summary>
        /// <example>
        /// SelfLog.Out = Console.Error;
        /// </example>
        public static TextWriter Out { get; set; }

        /// <summary>
        /// If true the self log will try to write to the sink(s).
        /// </summary>
        public static bool SendSelfLogToSink { get; set; }

        /// <summary>
        /// Write a message to the self-log.
        /// </summary>
        /// <param name="format">Standard .NET format string containing the message.</param>
        /// <param name="arg0">First argument, if supplied.</param>
        /// <param name="arg1">Second argument, if supplied.</param>
        /// <param name="arg2">Third argument, if supplied.</param>
        public static void WriteLine(string format, object arg0 = null, object arg1 = null, object arg2 = null)
        {
            var o = Out;
            if (o != null)
            {
                o.WriteLine(DateTime.Now.ToString("s") + " " + format, arg0, arg1, arg2);
                o.Flush();
            }

            if (SendSelfLogToSink)
            {
                Exception ex = null;
                if (arg0 is Exception)
                    ex = (Exception)arg0;
                if (arg1 is Exception)
                    ex = (Exception)arg1;
                if (arg2 is Exception)
                    ex = (Exception)arg2;

                if (ex != null)
                {
                    if (!ex.StackTrace.Contains("WriteLine"))
                    {
                        Log.Error(ex, string.Format(format, arg0, arg1, arg2));
                    }
                }
                else
                {
                    Log.Error(string.Format(format, arg0, arg1, arg2));
                }
            }
        }
    }
}
